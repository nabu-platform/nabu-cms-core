@path
@output nabu.cms.core.types.components.user
@operationId nabu.cms.core.login
@on =content/alias
@title Log in
@tags Nabu CMS Core
## Allows the user to log in

@content
nabu.cms.core.types.components.login login ?= null

configuration = application.configuration("nabu.cms.core.configuration")
disabled = configuration/disableLocalAccounts

useJWT = configuration/security/jwt/keystore != null && configuration/security/jwt/keyAlias != null

if (disabled != null && disabled)
	response.code(400)
	abort()
else
	# check throttling
	throttled = throttle(login/alias)
	if (throttled != null)
		response.content(throttled)
	else
		connectionId = configuration/connectionId
		# check the authentication type that was passed in (default is password)
		type = when(login/type = null, "password", login/type)
		
		# if you use password, we may "upgrade" you to a different type (like sms2fa)
		if (type = null || type = "password")
			types = nabu.cms.core.services.security.getAuthenticationTypes(connectionId, environment("webApplicationId"), login/alias, login/password)/types
			
			# get the chosen type from the list
			chosenType = types[name = /type]
			
			# if the chosen type is not supported, send back a list of types that _are_ supported
			if (chosenType = null)
				response.content(structure(
						currentAuthenticationType: type,
						authenticationTypes: types/name
					))
				response.code(202)
				abort()
		else 
			chosenType = nabu.cms.core.services.security.getAuthenticationType(type)/type
			
		if (!user.authenticate(login/alias, login/password, login/remember != null && login/remember, persist: !useJWT, type: when(chosenType/category != null, chosenType/category, chosenType/name)))
			response.code(400)
			abort()
		else
			user = nabu.cms.core.services.user.getCurrent(connectionId: connectionId, mustExist: true)/user
		
			# if you selected a different language while logged out, lets update that in the database	
			@cookie
			language ?= null
		
			if (language != null)
				# it is possible that we get a language array if you have multiple cookies on different paths
				# however, this fails if we send it along and we need to pick one winner anyway...
				# we could at this point go to the database to check the preference that is stored?
				language = first(language)
				
				languageEntry = first(nabu.cms.core.database.masterdata.entry.selectByCategoryAndName(connectionId, parameters: structure(category: "language", name: language))/results)
				if (languageEntry != null)
					nabu.cms.core.database.node.updateLanguage(connectionId, parameters: series(structure(id: user/id, languageId: languageEntry/id)))
				# illegal choice
				else
					language = null
			
			# we now take the language from the profile
			language = first(nabu.cms.core.database.user.selectLanguageByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/language)
				
			# if none is set in the profile, we get the language according to the application logic
			if (language == null)
				language = application.language()
			
			result = structure(
					id: user/id,
					alias: user.token()/name,
					realm: user.token()/realm,
					roles: nabu.cms.core.database.user.selectGlobalRolesByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
					actions: nabu.cms.core.database.user.selectGlobalActionsByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
					potentialRoles: nabu.cms.core.database.user.selectPotentialRolesByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
					potentialActions: nabu.cms.core.database.user.selectPotentialActionsByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
					language: language
				)
				
			if (useJWT)
				# the algorithm will be chosen based on the type of key you configure, this can be symmetric or asymetric
				result = structure(result, jwt: nabu.web.application.jwt.Services.marshal(
						keystore: configuration/security/jwt/keystore,
						keyAlias: configuration/security/jwt/keyAlias,
						issuedAt: date(),
						notBefore: date() - "5m",
						validUntil: date() + ("" + when(configuration/security/jwt/validityDuration == null, 3600, configuration/security/jwt/validityDuration) + "s"),
						issuer: environment("webApplicationId"),
						subject: user/id,
						audience: environment("webApplicationId"),
						realm: user.token()/realm,
						properties: series(structure(
							key: "alias",
							value: user.token()/name
						))
					)/response)
			response.content(result)
