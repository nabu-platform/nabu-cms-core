@path
@output nabu.cms.core.types.components.user
@operationId nabu.cms.core.remember
@title Remember
@tags user
## Will try to refresh the user session or remember the user identity

connectionId = application.configuration("nabu.cms.core.configuration")/connectionId

if (!user.authenticated() && !user.refresh() && !user.remember())
	oauth2 = structure()

	# add fodged
	if (nabu.web.application.Services.hasFragment(environment("webApplicationId"), "nabu.cms.core.providers.oauth2.fodged.stateful")/has)
		oauth2 = oauth2 + structure(fodged: nabu.authentication.oauth2.server.Services.getRedirectLink(
			"nabu.cms.core.providers.oauth2.fodged.stateful", 
			environment("webApplicationId"), 
			"OFFLINE")/link)

	# add google
	if (nabu.web.application.Services.hasFragment(environment("webApplicationId"), "nabu.cms.core.providers.oauth2.google.provider")/has)
		oauth2 = oauth2 + structure(google: nabu.authentication.oauth2.server.Services.getRedirectLink(
			"nabu.cms.core.providers.oauth2.google.provider", 
			environment("webApplicationId"), 
			"OFFLINE",
			true)/link)
			
	# add facebook
	if (nabu.web.application.Services.hasFragment(environment("webApplicationId"), "nabu.cms.core.providers.oauth2.facebook.provider")/has)
		oauth2 = oauth2 + structure(facebook: nabu.authentication.oauth2.server.Services.getRedirectLink(
			"nabu.cms.core.providers.oauth2.facebook.provider", 
			environment("webApplicationId"), 
			"OFFLINE")/link)
			
	# add linkedin
	if (nabu.web.application.Services.hasFragment(environment("webApplicationId"), "nabu.cms.core.providers.oauth2.linkedin.provider")/has)
		oauth2 = oauth2 + structure(linkedIn: nabu.authentication.oauth2.server.Services.getRedirectLink(
			"nabu.cms.core.providers.oauth2.linkedin.provider", 
			environment("webApplicationId"), 
			"OFFLINE")/link)
	
	oauth2 = structure(
			oauth: oauth2,
			realm: environment("realm"),
			roles: series("$guest"),
			actions: nabu.cms.core.database.action.selectByRoleName(connectionId, parameters: structure(roleName: "$guest"))/results/name
		)
	
	# set the oauth redirects as result
	response.content(oauth2)
	response.code(401);
	abort();
# if it's a system account, it is not "logged in"
# it allows us to secure rest services for internal use (e.g. emails)
else if (nabu.utils.Token.isSystemToken(user.token())/response)
	response.code(401);
	abort();
else
	user = nabu.cms.core.services.user.getCurrent(connectionId: connectionId, mustExist: true)/user

	# if you selected a different language while logged out, lets update that in the database	
	@cookie
	language ?= null
	
	if (language != null)
		languageEntry = first(nabu.cms.core.database.masterdata.entry.selectByCategoryAndName(connectionId, parameters: structure(category: "language", name: language))/results)
		if (languageEntry != null)
			nabu.cms.core.database.node.updateLanguage(connectionId, parameters: series(structure(id: user/id, languageId: languageEntry/id)))
			
	response.content(structure(
			id: user/id,
			alias: user.token()/name,
			realm: user.token()/realm,
			roles: nabu.cms.core.database.user.selectGlobalRolesByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
			actions: nabu.cms.core.database.user.selectGlobalActionsByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
			potentialRoles: nabu.cms.core.database.user.selectPotentialRolesByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
			potentialActions: nabu.cms.core.database.user.selectPotentialActionsByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/name,
			languageId: first(nabu.cms.core.database.user.selectLanguageByAlias(connectionId, parameters: structure(alias: user.token()/name, realm: user.token()/realm))/results/languageId)
		))